import cron from "node-cron";
import { Shop } from "../models/shop.model.js";
import { User } from "../models/user.model.js";
import ShopService from "./shop.service.js";

import dotenv from "dotenv";
import nodemailer from "nodemailer";
dotenv.config();
import { EMAIL_NAME, EMAIL_PASSWORD } from "../config/config.js";

// C·∫•u h√¨nh SMTP
const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
        user: EMAIL_NAME,
        pass: EMAIL_PASSWORD,
    },
});

const EmailService = {
    async sendTaxReminderEmailToOneShop(id) {
        try {
            const shop = await Shop.findByPk(id);
            if (!shop) {
                throw new Error("Shop not found");
            }
            const owner = await User.findByPk(shop.OwnerID);
            if (!owner) {
                throw new Error("Owner not found");
            }
            const email = shop.shopEmail || owner.userEmail;
            const subject = "Th√¥ng B√°o Nh·∫Øc Nh·ªü N·ªôp Thu·∫ø ";
            const content =
                "ƒê√£ ƒë·∫øn h·∫°n n·ªôp thu·∫ø th√°ng n√†y. Vui l√≤ng ƒë√≥ng thu·∫ø tr∆∞·ªõc ng√†y ... th√°ng n√†y ƒë·ªÉ ti·∫øp t·ª•c kinh doanh tr√™n h·ªá th·ªëng.";
            await sendEmail(email, subject, content);
        } catch (error) {
            console.error("Error sending tax reminder email:", error);
            throw error;
        }
    },

    async sendTaxReminderEmailToAllShops() {
        const revenues = await ShopService.getRevenueLastMonthAllShops();
        const emailPromises = revenues
            .filter((revenue) => revenue.Shop)
            .map((revenue) => {
                return transporter.sendMail({
                    from: process.env.EMAIL_NAME,
                    to: revenue.Shop.shopEmail,
                    subject: "Th√¥ng b√°o n·ªôp thu·∫ø th√°ng n√†y",
                    html: `
            <p>Xin ch√†o <strong>Nguy·ªÖn Xu√¢n Th√†nh</strong>,</p>
            <p>ƒê√¢y l√† th√¥ng b√°o nh·∫Øc nh·ªü n·ªôp thu·∫ø th√°ng n√†y.</p>
            <p><strong>Thu·∫ø √°p d·ª•ng cho  b·∫°n: 50.000 VNƒê</strong></p>
            <p>T√†i kho·∫£n nh·∫≠n ti·ªÅn: <strong>1018580214 - NGUYEN THANH VIET</strong>. Ng√¢n h√†ng VIETCOMBANK.</p>
            <p>N·ªôi dung chuy·ªÉn kho·∫£n: <strong>T·∫∑ng anh Vi·ªát b·ªìi b·ªï c∆° th·ªÉ.</strong></p>
            <p>Vui l√≤ng ki·ªÉm tra v√† ho√†n th√†nh nghƒ©a v·ª• thu·∫ø tr∆∞·ªõc 10h c√πng ng√†y.</p>
            <p>Tr√¢n tr·ªçng,</p>
            <p>H·ªá th·ªëng qu·∫£n l√Ω thu·∫ø</p>
          `,
                });
            });

        try {
            await Promise.all(emailPromises);
            console.log("üì© ƒê√£ g·ª≠i email ƒë·∫øn t·∫•t c·∫£ c·ª≠a h√†ng.");
            return { success: true, message: "T·∫•t c·∫£ email ƒë√£ ƒë∆∞·ª£c g·ª≠i" };
        } catch (error) {
            console.error(`‚ùå G·ª≠i email th·∫•t b·∫°i: ${error}`);
            return { success: false, message: "G·ª≠i email th·∫•t b·∫°i" };
        }
    },

    async resendTaxReminderEmailToAllShops() {
        const revenues = await ShopService.getResendEmailShops();
        const date = new Date().toLocaleDateString("vi-VN", {
            month: "2-digit",
            year: "numeric",
        });
        const emailPromises = revenues
            .filter((revenue) => revenue.Shop)
            .map((revenue) => {
                return transporter.sendMail({
                    from: process.env.EMAIL_NAME,
                    to: revenue.Shop.shopEmail,
                    subject: "Nh·∫Øc l·∫°i: Th√¥ng b√°o n·ªôp thu·∫ø th√°ng n√†y",
                    html: `
            <p>Xin ch√†o <strong>${revenue.Shop.shopName}</strong>,</p>
            <p>ƒê√¢y l√† th√¥ng b√°o nh·∫Øc nh·ªü l·∫ßn 2 v·ªÅ vi·ªác n·ªôp thu·∫ø th√°ng n√†y.</p>
            <p><strong>Thu·∫ø √°p d·ª•ng cho  b·∫°n: ${revenue.totalRevenue} VNƒê</strong></p>
            <p>T√†i kho·∫£n nh·∫≠n ti·ªÅn: <strong>(S·ªë t√†i kho·∫£n c·ªßa s√†n)</strong>. Ng√¢n h√†ng nh·∫≠n ti·ªÅn: (Bank).</p>
            <p>N·ªôi dung chuy·ªÉn kho·∫£n: <strong>ƒê√≥ng thu·∫ø th√°ng ${date}.</strong></p>
            <p>Vui l√≤ng ki·ªÉm tra v√† ho√†n th√†nh nghƒ©a v·ª• thu·∫ø <strong>tr∆∞·ªõc ng√†y 15</strong> c·ªßa th√°ng.</p>
            <p>N·∫øu ƒë·∫øn h·∫°n m√† kh√¥ng ho√†n th√†nh nghƒ©a v·ª• thu·∫ø, ch√∫ng t√¥i s·∫Ω t·∫°m ng∆∞ng vi·ªác kinh doanh c·ªßa c·ª≠a h√†ng tr√™n h·ªá th·ªëng.</p>
            <p>Tr√¢n tr·ªçng,</p>
            <p>H·ªá th·ªëng qu·∫£n l√Ω thu·∫ø</p>
          `,
                });
            });

        try {
            await Promise.all(emailPromises);
            console.log("üì© ƒê√£ g·ª≠i email ƒë·∫øn t·∫•t c·∫£ c·ª≠a h√†ng.");
            return { success: true, message: "T·∫•t c·∫£ email ƒë√£ ƒë∆∞·ª£c g·ª≠i" };
        } catch (error) {
            console.error(`‚ùå G·ª≠i email th·∫•t b·∫°i: ${error}`);
            return { success: false, message: "G·ª≠i email th·∫•t b·∫°i" };
        }
    },
};

// g·ª≠i v√†o ng√†y 10 h√†ng th√°ng, thu thu·∫ø ƒë·∫øn ng√†y 15
cron.schedule("0 0 10 * *", async () => {
    console.log("üì¢ ƒêang g·ª≠i email nh·∫Øc n·ªôp thu·∫ø ƒë·∫øn to√†n b·ªô shop...");
    await EmailService.sendTaxReminderEmailToAllShops();
});

cron.schedule("0 0 15 * *", async () => {
    console.log("üì¢ ƒêang g·ª≠i email nh·∫Øc n·ªôp thu·∫ø ƒë·∫øn c√°c shop ch∆∞a ƒë√≥ng thu·∫ø...");
    await EmailService.resendTaxReminderEmailToAllShops();
});

export default EmailService;
